@model List<ResultBrandDto>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/AdminLayout/Index.cshtml";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

<style>
    :root {
        --primary-color: #5A67D8; /* Slightly darker purple for a modern feel */
        --secondary-color: #6B7280;
        --background-light: #F9FAFB;
        --background-dark: #E5E7EB;
        --text-color: #1F2937;
        --card-bg: #FFFFFF;
        --border-color: #E5E7EB;
        --success-btn: #38A169;
        --warning-btn: #F6AD55;
        --danger-btn: #E53E3E;
        --focus-ring: rgba(99, 102, 241, 0.4);
    }

    body {
        font-family: 'Inter', sans-serif;
        color: var(--text-color);
        background-color: var(--background-light);
    }

    .brand-management-container {
        min-height: 100vh;
        padding: 6rem 1.5rem;
        margin: -1rem;
    }

    .brand-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .brand-header {
        text-align: center;
        margin-bottom: 3rem;
    }

        .brand-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--text-color);
            margin-bottom: 0.5rem;
        }

        .brand-header p {
            font-size: 1rem;
            color: var(--secondary-color);
        }

    .brand-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2.5rem;
        background: var(--card-bg);
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        border: 1px solid var(--border-color);
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-size: 0.95rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        min-width: 120px;
        justify-content: center;
    }

    .add-brand-btn {
        background: var(--primary-color);
        color: white;
    }

        .add-brand-btn:hover {
            background: #4C51BF;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(90, 103, 216, 0.4);
        }

    .search-box {
        position: relative;
        flex: 1;
        max-width: 350px;
        margin: 0 1.5rem;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1.25rem 0.75rem 2.5rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        background: var(--background-light);
        font-size: 0.95rem;
        outline: none;
        transition: all 0.2s ease;
    }

        .search-input:focus {
            background: white;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px var(--focus-ring);
        }

    .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--secondary-color);
        font-size: 0.9rem;
    }

    .brand-count {
        color: var(--secondary-color);
        font-size: 0.95rem;
        font-weight: 500;
    }

    .brand-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 2rem;
        margin-bottom: 2.5rem;
    }

    .brand-card {
        background: var(--card-bg);
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        border: 1px solid var(--border-color);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        animation: fadeIn 0.5s ease-out forwards;
        opacity: 0;
        transform: translateY(10px);
    }

        .brand-card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            border-color: var(--primary-color);
        }

    .brand-logo {
        width: 90px;
        height: 90px;
        margin: 0 auto 1.5rem;
        background: var(--background-light);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid var(--border-color);
        overflow: hidden;
    }

        .brand-logo img {
            width: 70px;
            height: 70px;
            object-fit: contain;
        }

        .brand-logo i {
            font-size: 2.5rem;
            color: #9CA3AF;
        }

    .brand-name {
        font-size: 1.4rem;
        font-weight: 700;
        color: var(--text-color);
        margin-bottom: 1.5rem;
        word-break: break-word;
    }

    .brand-actions {
        display: flex;
        justify-content: center;
        gap: 0.75rem;
        flex-wrap: wrap;
    }

    .action-btn {
        padding: 0.6rem 1rem;
        border: none;
        border-radius: 8px;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.4rem;
    }

    .view-btn {
        background: var(--success-btn);
        color: white;
    }

        .view-btn:hover {
            background: #2F855A;
            transform: translateY(-1px);
        }

    .edit-btn {
        background: var(--warning-btn);
        color: white;
    }

        .edit-btn:hover {
            background: #DD6B20;
            transform: translateY(-1px);
        }

    .delete-btn {
        background: var(--danger-btn);
        color: white;
    }

        .delete-btn:hover {
            background: #C53030;
            transform: translateY(-1px);
        }

    .empty-state {
        text-align: center;
        padding: 4rem 1.5rem;
        background: var(--card-bg);
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        border: 1px solid var(--border-color);
    }

        .empty-state i {
            font-size: 4rem;
            color: var(--border-color);
            margin-bottom: 1.5rem;
        }

        .empty-state h3 {
            color: var(--text-color);
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .empty-state p {
            color: var(--secondary-color);
            font-size: 1rem;
        }

    /* Modal Styles (unchanged) */
    .custom-modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        visibility: hidden;
        opacity: 0;
        transition: visibility 0.3s, opacity 0.3s;
    }

        .custom-modal-backdrop.show {
            visibility: visible;
            opacity: 1;
        }

    .custom-modal-content {
        background: white;
        padding: 30px;
        border-radius: 12px;
        max-width: 450px;
        width: 90%;
        text-align: center;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
        transform: scale(0.9);
        transition: transform 0.3s ease-out;
    }

    .custom-modal-backdrop.show .custom-modal-content {
        transform: scale(1);
    }

    .custom-modal-header {
        margin-bottom: 20px;
    }

        .custom-modal-header i {
            font-size: 3rem;
            color: var(--danger-btn);
            margin-bottom: 10px;
        }

        .custom-modal-header h4 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-color);
            margin: 0;
        }

    .custom-modal-body {
        font-size: 1rem;
        color: var(--secondary-color);
        margin-bottom: 30px;
    }

    .custom-modal-actions {
        display: flex;
        justify-content: center;
        gap: 15px;
    }

        .custom-modal-actions .btn {
            padding: 10px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .custom-modal-actions .cancel-btn {
            background: #E5E7EB;
            color: #6B7280;
        }

            .custom-modal-actions .cancel-btn:hover {
                background: #D1D5DB;
            }

        .custom-modal-actions .delete-btn {
            background: var(--danger-btn);
            color: white;
        }

            .custom-modal-actions .delete-btn:hover {
                background: #C53030;
            }

    /* Animations */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .brand-controls {
            flex-direction: column;
            gap: 1rem;
        }

        .search-box {
            max-width: 100%;
            margin: 0;
        }

        .brand-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .brand-header h1 {
            font-size: 2rem;
        }

        .brand-management-container {
            padding: 2rem 1rem;
        }
    }
</style>

<div class="brand-management-container">
    <div class="brand-container">
        <!-- Header -->
        <div class="brand-header">
            <h1><i class="fas fa-tags"></i> Brand Management</h1>
            <p>Manage automobile brands</p>
        </div>

        <!-- Controls -->
        <div class="brand-controls">
            <a href="@Url.Action("CreateBrand", "AdminBrand")" class="add-brand-btn btn">
                <i class="fas fa-plus"></i>
                Add Brand
            </a>

            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" class="search-input" placeholder="Search for a brand..." id="searchInput">
            </div>

            <div class="brand-count">
                <i class="fas fa-list"></i>
                <span id="brandCount">@Model.Count</span> Brands
            </div>
        </div>

        <!-- Brand Grid -->
        @if (Model != null && Model.Any())
        {
            <div class="brand-grid" id="brandGrid">
                @foreach (var brand in Model)
                {
                    <div class="brand-card" data-brand="@brand.BrandName.ToLower()">
                        <div class="brand-logo">
                            @if (!string.IsNullOrEmpty(brand.LogoUrl))
                            {
                                <img src="@brand.LogoUrl" alt="@brand.BrandName Logo" onerror="this.style.display='none'; this.parentElement.querySelector('i').style.display='block';">
                                <i class="fas fa-car" style="display: none;"></i>
                            }
                            else
                            {
                                <i class="fas fa-car"></i>
                            }
                        </div>
                        <div class="brand-name">@brand.BrandName</div>
                        <div class="brand-actions">
                            <a href="@Url.Action("EditBrand", "AdminBrand", new { id = brand.BrandId })" class="action-btn edit-btn">
                                <i class="fas fa-edit"></i>
                                Edit
                            </a>
                            <button class="action-btn delete-btn" onclick="showDeleteModal('@brand.BrandId', '@brand.BrandName')">
                                <i class="fas fa-trash"></i>
                                Delete
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-inbox"></i>
                <h3>No Brands Found</h3>
                <p>Start by adding your first brand to the system.</p>
            </div>
        }

        <!-- Dynamic Empty State (for search results) -->
        <div class="empty-state" id="emptyState" style="display: none;">
            <i class="fas fa-search"></i>
            <h3>No Brands Found</h3>
            <p id="emptyStateMessage"></p>
        </div>
    </div>
</div>

<!-- Custom Delete Confirmation Modal -->
<div class="custom-modal-backdrop" id="deleteModalBackdrop">
    <div class="custom-modal-content">
        <div class="custom-modal-header">
            <i class="fas fa-exclamation-triangle"></i>
            <h4>Are you sure?</h4>
        </div>
        <div class="custom-modal-body">
            <p id="modalMessage">This action cannot be undone. Are you sure you want to delete the <strong id="brandNameInModal"></strong> brand?</p>
        </div>
        <div class="custom-modal-actions">
            <button class="btn cancel-btn" onclick="hideDeleteModal()">Cancel</button>
            <button class="btn delete-btn" id="confirmDeleteBtn">Delete</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchInput');
        const brandGrid = document.getElementById('brandGrid');
        const brandCards = document.querySelectorAll('.brand-card');
        const brandCount = document.getElementById('brandCount');
        const emptyState = document.getElementById('emptyState');
        const emptyStateMessage = document.getElementById('emptyStateMessage');
        const deleteModalBackdrop = document.getElementById('deleteModalBackdrop');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const brandNameInModal = document.getElementById('brandNameInModal');

        if (searchInput && brandGrid) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase().trim();
                let visibleCount = 0;

                brandCards.forEach(card => {
                    const brandName = card.getAttribute('data-brand');
                    if (brandName && brandName.includes(searchTerm)) {
                        card.style.display = 'flex';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });

                brandCount.textContent = visibleCount;

                if (visibleCount === 0 && brandCards.length > 0) {
                    brandGrid.style.display = 'none';
                    emptyState.style.display = 'block';
                    emptyStateMessage.textContent = `No brands matching your search criteria were found: "${searchTerm}"`;
                } else {
                    brandGrid.style.display = 'grid';
                    emptyState.style.display = 'none';
                }
            });
        }

        // Add entrance animations with staggered delay
        const cards = document.querySelectorAll('.brand-card');
        cards.forEach((card, index) => {
            card.style.animationDelay = `${index * 0.05}s`;
            card.style.opacity = 1;
            card.style.transform = 'translateY(0)';
        });

        // Hide modal on backdrop click
        deleteModalBackdrop.addEventListener('click', function(e) {
            if (e.target === deleteModalBackdrop) {
                hideDeleteModal();
            }
        });

        // Modal functions
        window.showDeleteModal = function(brandId, brandName) {
            brandNameInModal.textContent = brandName;
            confirmDeleteBtn.setAttribute('data-brand-id', brandId);
            deleteModalBackdrop.classList.add('show');
        }

        window.hideDeleteModal = function() {
            deleteModalBackdrop.classList.remove('show');
        }

        // Handle deletion on modal button click
        confirmDeleteBtn.addEventListener('click', async function() {
            const brandId = this.getAttribute('data-brand-id');
            hideDeleteModal();

            try {
                const response = await fetch('@Url.Action("DeleteBrand", "AdminBrand")', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id: brandId }) // Use body for DELETE with JSON
                });

                if (response.ok) {
                    location.reload(); // Sayfayı yenileyerek listeyi günceller
                } else {
                    alert('Error deleting the brand. Please try again.');
                }
            } catch (error) {
                console.error('Deletion error:', error);
                alert('An unexpected error occurred during deletion.');
            }
        });
    });
</script>

@section Scripts {
    <script>
        console.log('Brand Index loaded');
    </script>
}
