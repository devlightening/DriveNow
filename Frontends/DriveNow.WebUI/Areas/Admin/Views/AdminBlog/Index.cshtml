@model List<DriveNow.Dtos.BlogDtos.ResultBlogDto>
@using DriveNow.Dtos.AuthorDtos
@using DriveNow.Dtos.CategoryDtos
@{
    ViewData["Title"] = "Blog Management";
    Layout = "~/Views/AdminLayout/Index.cshtml";
    var authors = ViewBag.Authors as List<ResultAuthorDto> ?? new();
    var categories = ViewBag.Categories as List<ResultCategoryDto> ?? new();
}

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #4A90E2;
            --primary-dark: #3A81D1;
            --warning: #F39C12;
            --text: #334155;
            --muted: #748089;
            --bg: #F8F9F9;
            --border: #E5E7EB;
            --shadow: 0 6px 18px rgba(0,0,0,.08);
            --shadow-sm: 0 3px 10px rgba(0,0,0,.06);
            --radius: 16px;
        }

        body {
            background: var(--bg);
            font-family: Inter,system-ui,-apple-system,"Segoe UI",Roboto,Arial;
        }

        .wrap {
            max-width: 1200px;
            margin: 0 auto;
            padding: 4.5rem 1.5rem;
        }

        .header {
            background: linear-gradient(135deg,var(--primary),var(--primary-dark));
            color: #fff;
            border-radius: 18px;
            padding: 1rem 1.25rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--shadow);
        }

            .header h2 {
                margin: 0;
                font-size: 1.28rem;
                display: flex;
                gap: .6rem;
                align-items: center
            }

        .count {
            font-weight: 700;
            opacity: .95
        }

        .alert-note {
            margin: 1rem 0 1.5rem;
            background: #fff;
            border: 1px solid var(--border);
            border-left: 4px solid var(--warning);
            border-radius: 14px;
            padding: 1rem 1.25rem;
            box-shadow: var(--shadow-sm);
            color: #475569
        }

        .controls {
            display: grid;
            grid-template-columns: 1fr 240px 240px 160px;
            gap: .75rem;
            background: #fff;
            border: 1px solid var(--border);
            border-radius: 14px;
            padding: 1rem;
            box-shadow: var(--shadow-sm);
            margin: 1rem 0 1.5rem
        }

        .search {
            position: relative
        }

            .search input {
                width: 100%;
                border: 1px solid var(--border);
                border-radius: 12px;
                padding: .78rem 1rem .78rem 2.25rem;
                background: #fff;
                outline: none
            }

            .search i {
                position: absolute;
                left: .75rem;
                top: 50%;
                transform: translateY(-50%);
                color: var(--muted)
            }

        select {
            width: 100%;
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: .72rem 1rem;
            background: #fff;
            color: var(--text)
        }

        .btn-clear {
            border: 1px solid #dfe3ff;
            background: #eef2ff;
            color: #4f46e5;
            border-radius: 12px;
            font-weight: 700;
            cursor: pointer;
            padding: .72rem 1rem;
            transition: .15s
        }

            .btn-clear:hover {
                filter: brightness(.97)
            }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill,minmax(340px,1fr));
            gap: 1.25rem
        }

        .card {
            background: #fff;
            border: 1px solid var(--border);
            border-radius: var(--radius);
            box-shadow: var(--shadow-sm);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            transition: .2s
        }

            .card:hover {
                transform: translateY(-2px);
                box-shadow: var(--shadow)
            }

        /* MEDIA + overlay buttons */
        .media {
            position: relative;
            height: 220px;
            overflow: hidden
        }

        .cover {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
            transform: scale(1);
            transition: transform .35s ease
        }

        .card:hover .cover {
            transform: scale(1.04)
        }

        .media::after {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(to bottom,rgba(0,0,0,.22),rgba(0,0,0,.05) 45%,rgba(0,0,0,.45));
            opacity: 0;
            transition: opacity .25s;
            pointer-events: none;
            z-index: 1
        }

        .media::before {
            content: "";
            position: absolute;
            left: 0;
            right: 0;
            bottom: 0;
            height: 100px;
            background: linear-gradient(to top,rgba(0,0,0,.6),rgba(0,0,0,0));
            opacity: 0;
            transition: opacity .25s;
            pointer-events: none;
            z-index: 1
        }

        .card:hover .media::after, .card:hover .media::before {
            opacity: 1
        }

        .overlay-actions {
            position: absolute;
            left: 12px;
            right: 12px;
            bottom: 14px;
            display: flex;
            justify-content: center;
            gap: .6rem;
            opacity: 0;
            transform: translateY(8px);
            transition: opacity .25s,transform .25s;
            z-index: 4;
            pointer-events: none
        }

        .card:hover .overlay-actions {
            opacity: 1;
            transform: translateY(0);
            pointer-events: auto
        }

        .obtn {
            border: none;
            border-radius: 999px;
            padding: .55rem 1rem;
            font-weight: 800;
            display: inline-flex;
            gap: .45rem;
            align-items: center;
            color: #fff;
            box-shadow: 0 8px 20px rgba(0,0,0,.2);
            cursor: pointer;
            transition: filter .15s
        }

            .obtn:hover {
                filter: brightness(1.06)
            }

        .obtn-dark {
            background: rgba(17,24,39,.95)
        }

        .obtn-comments {
            background: #2563eb
        }
        /* <<< NEW: Comments button (mavi) */
        .obtn-toggle.publish {
            background: #059669
        }
        /* yeşil */
        .obtn-toggle.unpublish {
            background: #dc2626
        }
        /* kırmızı */

        .body {
            padding: 1rem 1rem .5rem
        }

        .title {
            font-weight: 800;
            color: var(--text);
            margin: .1rem 0 .45rem;
            font-size: 1.06rem;
            line-height: 1.35
        }

        .meta {
            color: #6b7280;
            font-size: .88rem;
            display: flex;
            gap: .5rem;
            flex-wrap: wrap;
            align-items: center
        }

        .badge {
            display: inline-flex;
            align-items: center;
            gap: .35rem;
            padding: .28rem .55rem;
            border-radius: 999px;
            font-weight: 800;
            font-size: .72rem
        }

            .badge.author {
                background: #ecfeff;
                color: #0e7490
            }

            .badge.cat {
                background: #eef2ff;
                color: #4338ca
            }

            .badge.date {
                background: #f1f5f9;
                color: #0f172a
            }

        .desc {
            color: #6b7280;
            margin: .65rem 0 .2rem;
            font-size: .95rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden
        }

        .empty {
            text-align: center;
            background: #fff;
            border: 1px solid var(--border);
            border-radius: 14px;
            padding: 3rem 1rem;
            color: #64748b
        }

        @@media(max - width:980px) {
            .controls

        {
            grid-template-columns: 1fr 1fr
        }

        }
    </style>
</head>

<div class="wrap">
    <div class="header">
        <h2><i class="fa-solid fa-newspaper"></i> Blog Management</h2>
        <div class="count"><i class="fa-regular fa-list-alt me-1"></i> <span id="resultsCount">@(Model?.Count ?? 0)</span> blogs</div>
    </div>

    <div class="alert-note">
        <strong>Heads-up:</strong> Creating and editing posts are actions for <em>authors</em> only.
        As an admin, you can <strong>publish / unpublish</strong> posts and view their <strong>comments</strong>.
        Authors should sign in to manage their own posts.
    </div>

    <div class="controls">
        <div class="search">
            <i class="fa-solid fa-magnifying-glass"></i>
            <input id="searchInput" placeholder="Search by title or description…">
        </div>
        <select id="authorFilter">
            <option value="">All Authors</option>
            @foreach (var a in authors)
            {
                <option value="@a.AuthorId">@a.AuthorName</option>
            }
        </select>
        <select id="categoryFilter">
            <option value="">All Categories</option>
            @foreach (var c in categories)
            {
                <option value="@c.CategoryId">@c.CategoryName</option>
            }
        </select>
        <button class="btn-clear" id="clearFiltersBtn"><i class="fa-solid fa-eraser"></i> Clear</button>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="grid" id="blogGrid">
            @foreach (var b in Model)
            {
                var isPub = b.IsPublished;
                var toggleClass = isPub ? "unpublish" : "publish";
                var toggleText = isPub ? "Unpublish" : "Publish";

                <div class="card"
                     data-id="@b.BlogId"
                     data-title="@(b.Title ?? "").ToLower()"
                     data-description="@(b.Description ?? "").ToLower()"
                     data-author-id="@b.AuthorId"
                     data-category-id="@b.CategoryId"
                     data-created="@b.CreatedDate.ToString("o")">

                    <div class="media">
                        <img class="cover" src="@b.CoverImageUrl" alt="@b.Title" onerror="this.style.display='none'" />

                        <div class="overlay-actions">
                            <!-- NEW: Comments button -> AdminComment/Index?blogId=...&q=Title -->
                            <a class="obtn obtn-comments"
                               href="/Admin/AdminComment/Index?blogId=@b.BlogId&q=@System.Net.WebUtility.UrlEncode(b.Title ?? "")"
                               title="View comments for this blog">
                                <i class="fa-regular fa-comments"></i> Comments
                            </a>

                            <a class="obtn obtn-dark" href="/Blog/BlogDetail/@b.BlogId" target="_blank" title="Open blog">
                                <i class="fa-solid fa-up-right-from-square"></i> Open
                            </a>

                            <button class="obtn obtn-toggle @toggleClass"
                                    type="button"
                                    data-published="@isPub.ToString().ToLower()"
                                    onclick="togglePublish('@b.BlogId', this)">
                                <i class="fa-solid fa-power-off"></i> @toggleText
                            </button>
                        </div>
                    </div>

                    <div class="body">
                        <div class="title">@b.Title</div>
                        <div class="meta">
                            <span class="badge author"><i class="fa-solid fa-user-pen"></i> @b.AuthorName</span>
                            <span class="badge cat"><i class="fa-solid fa-folder-open"></i> @b.CategoryName</span>
                            <span class="badge date"><i class="fa-regular fa-calendar"></i> @b.CreatedDate.ToString("dd.MM.yyyy")</span>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(b.Description))
                        {
                            <div class="desc">@b.Description</div>
                        }
                    </div>
                </div>
            }
        </div>
        <div id="noResults" class="empty" style="display:none;">
            <i class="fa-regular fa-face-frown fa-2x mb-2"></i>
            <p>No matching posts found.</p>
        </div>
    }
    else
    {
        <div class="empty">
            <i class="fa-regular fa-rectangle-list fa-2x mb-2"></i>
            <p>No posts found.</p>
        </div>
    }
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        function toast(msg,type='info'){
          const el=document.createElement('div');
          el.style.cssText='position:fixed;top:18px;right:18px;z-index:9999;padding:.9rem 1.1rem;border-radius:12px;font-weight:800;box-shadow:0 6px 20px rgba(0,0,0,.12);color:#fff';
          el.textContent=msg;
          el.style.background= type==='success' ? '#10B981' : type==='error' ? '#EF4444' : type==='warn' ? '#F59E0B' : '#111827';
          document.body.appendChild(el);
          setTimeout(()=>{el.style.opacity='0';el.style.transition='opacity .25s';setTimeout(()=>el.remove(),250)},1800);
        }

        const grid=document.getElementById('blogGrid');
        const searchInput=document.getElementById('searchInput');
        const authorFilter=document.getElementById('authorFilter');
        const categoryFilter=document.getElementById('categoryFilter');
        const clearFiltersBtn=document.getElementById('clearFiltersBtn');
        const noResults=document.getElementById('noResults');
        const resultsCount=document.getElementById('resultsCount');

        function applyFilters(){
          if(!grid) return;
          const cards=[...grid.children];
          const q=(searchInput?.value||'').trim().toLowerCase();
          const aId=authorFilter?.value||'';
          const cId=categoryFilter?.value||'';
          let visible=0;

          cards.forEach(card=>{
            const t=(card.getAttribute('data-title')||'');
            const d=(card.getAttribute('data-description')||'');
            const ca=(card.getAttribute('data-author-id')||'');
            const cc=(card.getAttribute('data-category-id')||'');

            const okText=!q||t.includes(q)||d.includes(q);
            const okAuthor=!aId||ca===aId;
            const okCat=!cId||cc===cId;
            const show=okText&&okAuthor&&okCat;

            card.style.display=show?'':'none';
            if(show) visible++;
          });

          if(resultsCount) resultsCount.textContent=visible;
          if(noResults) noResults.style.display=visible?'none':'block';
          grid.style.display=visible?'grid':'none';
        }

        searchInput?.addEventListener('input',applyFilters);
        authorFilter?.addEventListener('change',applyFilters);
        categoryFilter?.addEventListener('change',applyFilters);
        clearFiltersBtn?.addEventListener('click',()=>{ if(searchInput) searchInput.value=''; if(authorFilter) authorFilter.value=''; if(categoryFilter) categoryFilter.value=''; applyFilters(); });
        document.addEventListener('DOMContentLoaded',applyFilters);

        // Publish toggle (UI anında güncellenir)
        async function togglePublish(id,btn){
          try{
            btn?.setAttribute('disabled','disabled');
            const res=await fetch('/Admin/AdminBlog/TogglePublish?id='+id,{method:'POST'});
            if(res.ok){
              const wasPublished = (btn.dataset.published === 'true');
              const nowPublished = !wasPublished;
              btn.dataset.published = String(nowPublished);

              btn.classList.remove('publish','unpublish');
              if(nowPublished){
                btn.classList.add('unpublish'); // artık unpublish => kırmızı
                btn.innerHTML = '<i class="fa-solid fa-power-off"></i> Unpublish';
              }else{
                btn.classList.add('publish');   // artık publish => yeşil
                btn.innerHTML = '<i class="fa-solid fa-power-off"></i> Publish';
              }
              toast('Publish status updated.','success');
            }else{
              let msg='Something went wrong.'; try{ const j=await res.json(); msg=j.detail||j.message||msg }catch{}
              toast(msg,'error');
            }
          }catch(e){ toast('Request failed.','error'); }
          finally{ btn?.removeAttribute('disabled'); }
        }
        window.togglePublish=togglePublish;
    </script>
}
