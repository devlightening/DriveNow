@using DriveNow.Dtos.CommentDtos
@model List<ResultCommentDto>
@{
    Layout = "~/Views/AdminLayout/Index.cshtml";
    var blogMap = ViewBag.BlogMap as Dictionary<Guid, string> ?? new();
    var total = (int?)ViewBag.TotalCount ?? (Model?.Count ?? 0);
}

<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-200: #e5e7eb;
            --gray-300: #d1d5db;
            --gray-400: #9ca3af;
            --gray-500: #6b7280;
            --gray-600: #4b5563;
            --gray-700: #374151;
            --gray-800: #1f2937;
            --gray-900: #111827;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
            --radius: 0.75rem;
            --radius-lg: 1rem;
            --radius-xl: 1.5rem;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Header Section */
        .page-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-xl);
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-xl);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .header-title {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

            .header-title h1 {
                font-size: 2.5rem;
                font-weight: 800;
                background: linear-gradient(135deg, var(--primary), var(--primary-dark));
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
                margin: 0;
            }

        .header-icon {
            width: 64px;
            height: 64px;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            border-radius: var(--radius-lg);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            box-shadow: var(--shadow-md);
        }

        .stats-badge {
            background: linear-gradient(135deg, var(--success), #059669);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: var(--radius-lg);
            font-weight: 700;
            font-size: 1.1rem;
            box-shadow: var(--shadow-md);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        /* Info Card */
        .info-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-lg);
            padding: 1.5rem;
            margin-bottom: 2rem;
            border-left: 4px solid var(--warning);
            box-shadow: var(--shadow-lg);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

            .info-card .info-icon {
                color: var(--warning);
                margin-right: 0.5rem;
            }

            .info-card strong {
                color: var(--gray-900);
            }

        /* Controls Section */
        .controls-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-lg);
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-lg);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .controls-grid {
            display: grid;
            grid-template-columns: 2fr 1fr auto;
            gap: 1rem;
            align-items: center;
        }

        .search-container {
            position: relative;
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray-400);
            font-size: 1.1rem;
        }

        .search-input {
            width: 100%;
            padding: 0.875rem 1rem 0.875rem 2.75rem;
            border: 2px solid var(--gray-200);
            border-radius: var(--radius-lg);
            font-size: 1rem;
            font-weight: 500;
            background: white;
            transition: all 0.3s ease;
        }

            .search-input:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.1);
                transform: translateY(-1px);
            }

        .filter-select {
            padding: 0.875rem 1rem;
            border: 2px solid var(--gray-200);
            border-radius: var(--radius-lg);
            font-size: 1rem;
            font-weight: 500;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .filter-select:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.1);
            }

        .clear-btn {
            padding: 0.875rem 1.5rem;
            background: linear-gradient(135deg, var(--gray-600), var(--gray-700));
            color: white;
            border: none;
            border-radius: var(--radius-lg);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: var(--shadow);
        }

            .clear-btn:hover {
                transform: translateY(-2px);
                box-shadow: var(--shadow-lg);
            }

        /* Comments Grid */
        .comments-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .comment-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-xl);
            overflow: hidden;
            box-shadow: var(--shadow-lg);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

            .comment-card:hover {
                transform: translateY(-8px);
                box-shadow: var(--shadow-xl);
            }

        .comment-header {
            padding: 1.5rem;
            background: linear-gradient(135deg, var(--gray-50), #e8f4fd);
            border-bottom: 1px solid var(--gray-200);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .avatar {
            width: 52px;
            height: 52px;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 800;
            font-size: 1.2rem;
            box-shadow: var(--shadow);
        }

        .user-details h3 {
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: 0.25rem;
            font-size: 1.1rem;
        }

        .blog-link {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 0.5rem 1rem;
            border-radius: var(--radius);
            text-decoration: none;
            font-weight: 600;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            box-shadow: var(--shadow);
        }

            .blog-link:hover {
                transform: translateY(-1px);
                box-shadow: var(--shadow-md);
                color: white;
            }

        .timestamp {
            color: var(--gray-500);
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .comment-content {
            padding: 1.5rem;
            color: var(--gray-700);
            line-height: 1.7;
            font-size: 1rem;
        }

        .comment-actions {
            padding: 1rem 1.5rem;
            background: var(--gray-50);
            border-top: 1px solid var(--gray-200);
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .action-btn {
            padding: 0.75rem 1.25rem;
            border: none;
            border-radius: var(--radius);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            font-size: 0.875rem;
            box-shadow: var(--shadow);
        }

        .btn-open {
            background: linear-gradient(135deg, var(--gray-800), var(--gray-900));
            color: white;
        }

        .btn-delete {
            background: linear-gradient(135deg, var(--danger), #dc2626);
            color: white;
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .btn-open:hover {
            color: white;
        }

        .btn-delete:hover {
            color: white;
        }

        .action-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-xl);
            box-shadow: var(--shadow-lg);
            border: 1px solid rgba(255, 255, 255, 0.2);
            margin-top: 2rem;
        }

        .empty-icon {
            font-size: 4rem;
            color: var(--gray-400);
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            color: var(--gray-700);
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .empty-state p {
            color: var(--gray-500);
            font-size: 1.1rem;
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 2rem;
            right: 2rem;
            z-index: 9999;
            padding: 1rem 1.5rem;
            border-radius: var(--radius-lg);
            color: white;
            font-weight: 600;
            box-shadow: var(--shadow-xl);
            backdrop-filter: blur(20px);
            transform: translateX(400px);
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }

            .toast.show {
                transform: translateX(0);
            }

            .toast.success {
                background: linear-gradient(135deg, var(--success), #059669);
            }

            .toast.error {
                background: linear-gradient(135deg, var(--danger), #dc2626);
            }

            .toast.info {
                background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            }

        /* Responsive Design */
        @@media (max-width: 1200px) {
            .controls-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .comments-grid {
                grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            }
        }

        @@media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .header-content {
                flex-direction: column;
                text-align: center;
            }

            .header-title h1 {
                font-size: 2rem;
            }

            .comments-grid {
                grid-template-columns: 1fr;
            }

            .comment-actions {
                flex-direction: column;
            }

            .action-btn {
                justify-content: center;
            }
        }

        /* Loading Animation */
        @@keyframes pulse {
            0%, 100% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }
        }

        .loading {
            animation: pulse 1.5s ease-in-out infinite;
        }

        /* Smooth Animations */
        .fade-in {
            animation: fadeIn 0.6s ease-out;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .slide-up {
            animation: slideUp 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }

        @@keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(40px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>

<div class="container">
    <!-- Page Header -->
    <div class="page-header fade-in">
        <div class="header-content">
            <div class="header-title">
                <div class="header-icon">
                    <i class="fas fa-comments"></i>
                </div>
                <h1>Comments Management</h1>
            </div>
            <div class="stats-badge">
                <i class="fas fa-chart-line"></i>
                <span id="totalCount">@total</span> comments
            </div>
        </div>
    </div>

    <!-- Info Card -->
    <div class="info-card fade-in">
        <i class="fas fa-info-circle info-icon"></i>
        <strong>Administrator Notice:</strong> You can only <strong>delete</strong> comments from this panel. Adding or editing comments is handled by users on the website frontend.
    </div>

    <!-- Controls Section -->
    <div class="controls-section slide-up">
        <div class="controls-grid">
            <div class="search-container">
                <i class="fas fa-search search-icon"></i>
                <input id="searchInput" class="search-input" placeholder="Search by author name, comment text, or blog title...">
            </div>
            <select id="blogFilter" class="filter-select">
                <option value="">All Blog Posts</option>
                @foreach (var kv in blogMap.OrderBy(x => x.Value))
                {
                    <option value="@kv.Key">@kv.Value</option>
                }
            </select>
            <button class="clear-btn">
                <i class="fas fa-eraser"></i>
                Clear Filters
            </button>
        </div>
    </div>

    <!-- Comments Grid -->
    @if (Model != null && Model.Any())
    {
        <div class="comments-grid" id="commentGrid">
            @foreach (var c in Model.OrderByDescending(x => x.CreatedAt))
            {
                var title = blogMap.TryGetValue(c.BlogId, out var t) ? t : "Unknown Blog";
                <div class="comment-card slide-up"
                     data-id="@c.CommentId"
                     data-name="@((c.Name ?? "").ToLower())"
                     data-text="@((c.Content ?? "").ToLower())"
                     data-blogtitle="@((title ?? "").ToLower())"
                     data-blogid="@c.BlogId">

                    <div class="comment-header">
                        <div class="user-info">
                            <div class="avatar">
                                @((c.Name ?? "?").Trim().FirstOrDefault())
                            </div>
                            <div class="user-details">
                                <h3>@c.Name</h3>
                                <a class="blog-link" href="/Blog/BlogDetail/@c.BlogId" target="_blank">
                                    <i class="fas fa-book-open"></i>
                                    @title
                                </a>
                                <div class="timestamp">
                                    <i class="fas fa-clock"></i>
                                    @c.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="comment-content">
                        @c.Content
                    </div>

                    <div class="comment-actions">
                        <a class="action-btn btn-open" href="/Blog/BlogDetail/@c.BlogId" target="_blank">
                            <i class="fas fa-external-link-alt"></i>
                            View Post
                        </a>
                        <button class="action-btn btn-delete" onclick="deleteComment('@c.CommentId', this)">
                            <i class="fas fa-trash-alt"></i>
                            Delete
                        </button>
                    </div>
                </div>
            }
        </div>

        <div id="noResults" class="empty-state" style="display:none;">
            <div class="empty-icon">
                <i class="fas fa-search-minus"></i>
            </div>
            <h3>No Comments Found</h3>
            <p>No comments match your current search criteria. Try adjusting your filters.</p>
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-comments"></i>
            </div>
            <h3>No Comments Yet</h3>
            <p>Comments will appear here once users start engaging with your blog posts.</p>
        </div>
    }
</div>

@section Scripts {
    <script>
         // Enhanced Toast System
         function showToast(message, type = 'info') {
             const toast = document.createElement('div');
             toast.className = `toast ${type}`;
             toast.innerHTML = `
                 <div style="display: flex; align-items: center; gap: 0.5rem;">
                     <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                     ${message}
                 </div>
             `;

             document.body.appendChild(toast);

             // Trigger show animation
             setTimeout(() => toast.classList.add('show'), 100);

             // Auto remove
             setTimeout(() => {
                 toast.classList.remove('show');
                 setTimeout(() => toast.remove(), 400);
             }, 3000);
         }

         // DOM Elements
         const grid = document.getElementById('commentGrid');
         const searchInput = document.getElementById('searchInput');
         const blogFilter = document.getElementById('blogFilter');
         const clearBtn = document.querySelector('.clear-btn');
         const noResults = document.getElementById('noResults');
         const totalCount = document.getElementById('totalCount');

         // Filter and Search Functionality
         function applyFilters() {
             if (!grid) return;

             const query = (searchInput?.value || '').trim().toLowerCase();
             const blogId = blogFilter?.value || '';
             let visibleCount = 0;

             [...grid.children].forEach(card => {
                 const name = card.getAttribute('data-name') || '';
                 const text = card.getAttribute('data-text') || '';
                 const blogTitle = card.getAttribute('data-blogtitle') || '';
                 const cardBlogId = card.getAttribute('data-blogid') || '';

                 const matchesText = !query ||
                     name.includes(query) ||
                     text.includes(query) ||
                     blogTitle.includes(query);

                 const matchesBlog = !blogId || cardBlogId === blogId;
                 const shouldShow = matchesText && matchesBlog;

                 card.style.display = shouldShow ? '' : 'none';
                 if (shouldShow) visibleCount++;
             });

             // Update UI based on results
             if (totalCount) totalCount.textContent = visibleCount;
             if (noResults) noResults.style.display = visibleCount ? 'none' : 'block';
             if (grid) grid.style.display = visibleCount ? 'grid' : 'none';
         }

         // Event Listeners
         searchInput?.addEventListener('input', applyFilters);
         blogFilter?.addEventListener('change', applyFilters);
         clearBtn?.addEventListener('click', () => {
             if (searchInput) searchInput.value = '';
             if (blogFilter) blogFilter.value = '';
             applyFilters();
             showToast('Filters cleared successfully', 'success');
         });

         // Enhanced Delete Function
         async function deleteComment(id, button) {
             if (!confirm('Are you sure you want to delete this comment? This action cannot be undone.')) {
                 return;
             }

             try {
                 // Disable button and show loading state
                 button.disabled = true;
                 button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
                 button.classList.add('loading');

                 const response = await fetch(`/Admin/AdminComment/DeleteComment?id=${id}`, {
                     method: 'DELETE',
                     headers: {
                         'Content-Type': 'application/json',
                     }
                 });

                 if (response.ok) {
                     // Remove card with animation
                     const card = button.closest('.comment-card');
                     if (card) {
                         card.style.transform = 'translateX(100%)';
                         card.style.opacity = '0';
                         setTimeout(() => {
                             card.remove();
                             applyFilters();
                         }, 300);
                     }

                     showToast('Comment deleted successfully!', 'success');
                 } else {
                     let errorMessage = 'Failed to delete comment';
                     try {
                         const errorData = await response.json();
                         errorMessage = errorData.message || errorData.detail || errorMessage;
                     } catch (e) {
                         // Use default error message
                     }
                     throw new Error(errorMessage);
                 }
             } catch (error) {
                 console.error('Delete error:', error);
                 showToast(error.message || 'An error occurred while deleting the comment', 'error');
             } finally {
                 // Reset button state
                 if (button && !button.closest('.comment-card').style.transform) {
                     button.disabled = false;
                     button.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
                     button.classList.remove('loading');
                 }
             }
         }

         // Make function globally available
         window.deleteComment = deleteComment;

         // Initialize filters on page load
          document.addEventListener('DOMContentLoaded', () => {
           const params = new URLSearchParams(window.location.search);
           const preBlogId = params.get('blogId');
           const preQ      = params.get('q');

           const searchInput = document.getElementById('searchInput');
           const blogFilter  = document.getElementById('blogFilter');

           if (preBlogId && blogFilter)  blogFilter.value  = preBlogId;
           if (preQ && searchInput)      searchInput.value = preQ;

           applyFilters(); // değerleri set ettikten sonra uygula
         });
         searchInput?.addEventListener('input', applyFilters);
         blogFilter?.addEventListener('change', applyFilters);
         clearBtn?.addEventListener('click', () => { searchInput.value=''; blogFilter.value=''; applyFilters(); });

         // Keyboard shortcuts
         document.addEventListener('keydown', (e) => {
             // Ctrl/Cmd + K to focus search
             if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                 e.preventDefault();
                 searchInput?.focus();
             }

             // Escape to clear search
             if (e.key === 'Escape' && document.activeElement === searchInput) {
                 searchInput.value = '';
                 applyFilters();
             }
         });
    </script>
}