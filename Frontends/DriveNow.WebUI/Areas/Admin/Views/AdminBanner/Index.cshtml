@using DriveNow.Dtos.BannerDtos
@model List<ResultBannerDto>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/AdminLayout/Index.cshtml";
}

<!-- CSS -->
<style>
    body {
        background-color: #f8fafc;
        font-family: 'Inter', sans-serif;
    }

    .page-header-styling {
        padding: 2rem 0;
        border-bottom: 1px solid #e5e7eb;
        margin-bottom: 1rem;
    }

    .page-title-text {
        font-size: 1.75rem;
        font-weight: 700;
        color: #1f2937;
    }

    .search-card-style {
        border-radius: 1rem;
        border: none;
        background: #ffffff;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.05);
    }

    .modern-search-input input {
        border-radius: 0.75rem 0 0 0.75rem;
        border: 1px solid #e5e7eb;
        padding: 0.75rem 1rem;
    }

    .search-button {
        border-radius: 0 0.75rem 0.75rem 0;
        padding: 0.75rem 1.25rem;
        font-weight: 600;
        background: linear-gradient(90deg, #6366f1, #4f46e5);
        border: none;
        color: #fff;
        transition: 0.3s ease;
    }

        .search-button:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

    .add-new-btn {
        border-radius: 0.75rem;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        background: linear-gradient(90deg, #10b981, #059669);
        color: #fff;
        border: none;
        transition: 0.3s ease;
    }

        .add-new-btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

    .sort-dropdown {
        border-radius: 0.75rem;
        border: 1px solid #e5e7eb;
        padding: 0.5rem 0.75rem;
    }

    .banner-grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 1.75rem;
        margin-top: 2rem;
    }

    .banner-card {
        border-radius: 1rem;
        background: #fff;
        border: none;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.06);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
    }

        .banner-card:hover {
            transform: translateY(-6px);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.1);
        }

    .card-body {
        padding: 1.5rem;
    }

    .banner-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #111827;
        margin-bottom: 0.5rem;
    }

    .banner-description {
        color: #6b7280;
        font-size: 0.95rem;
        margin-bottom: 1rem;
    }

    .banner-details {
        list-style: none;
        padding: 0;
        font-size: 0.9rem;
        color: #4b5563;
    }

        .banner-details li {
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        }

        .banner-details i {
            color: #4f46e5;
            margin-right: 0.5rem;
        }

    .banner-video-url {
        color: #2563eb;
        word-break: break-word;
        font-weight: 500;
    }

    .banner-actions {
        margin-top: 1rem;
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
    }

    .btn-action {
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.2s ease;
    }

        .btn-action:hover {
            transform: scale(1.05);
        }

    .btn-edit {
        background: #6b7280;
        color: #fff;
        border: none;
    }

    .btn-delete {
        background: #ef4444;
        color: #fff;
        border: none;
    }

    .alert-info {
        border-radius: 0.75rem;
        background: #e0f2fe;
        color: #0369a1;
        padding: 1rem;
        text-align: center;
    }

    /* Modal */
    .modal-backdrop-custom {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .modal-content-custom {
        background: #fff;
        padding: 2rem;
        border-radius: 1rem;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        width: 100%;
        max-width: 400px;
    }

    .modal-message {
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        color: #374151;
    }

    .modal-buttons {
        display: flex;
        justify-content: space-between;
    }
</style>

<div class="page-content-wrapper">
    <div class="container-fluid">
        <div class="page-title-box d-flex align-items-center justify-content-between page-header-styling">
            <h4 class="mb-0 page-title-text">🚀 Banner Management</h4>
            <ol class="breadcrumb m-0">
                <li><a href="/Admin/Dashboard">Dashboard</a></li>
                <li class="active">Banner Management</li>
            </ol>
        </div>

        <!-- Search & Filters -->
        <div class="card search-card-style mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-lg-7">
                        <div class="input-group modern-search-input">
                            <input type="text" id="bannerSearchInput" class="form-control" placeholder="🔍 Search banners...">
                            <button class="btn search-button" type="button" id="bannerSearchButton">Search</button>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <select id="sortBanners" class="form-select sort-dropdown">
                            <option value="title">Sort by Title</option>
                            <option value="description">Sort by Description</option>
                        </select>
                    </div>
                    <div class="col-lg-2 text-end">
                        <a href="@Url.Action("CreateBanner", "AdminBanner", new { area = "Admin" })" class="btn add-new-btn w-100">+ Add New</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Banner Cards -->
        <div class="banner-grid-container" id="bannerListContainer">
            @if (Model != null && Model.Any())
            {
                foreach (var banner in Model)
                {
                    <div class="banner-card"
                         data-title="@banner.Title.ToLower()"
                         data-description="@banner.Description.ToLower()"
                         data-videodescription="@banner.VideoDescription.ToLower()"
                         data-videourl="@banner.VideoUrl.ToLower()">
                        <div class="card-body">
                            <h5 class="banner-title">@banner.Title</h5>
                            <p class="banner-description">@banner.Description</p>
                            <ul class="banner-details">
                                <li><i class="mdi mdi-text-box-multiple-outline"></i>@banner.VideoDescription</li>
                                <li><i class="mdi mdi-link"></i><a href="@banner.VideoUrl" target="_blank" class="banner-video-url">@banner.VideoUrl</a></li>
                            </ul>
                            <div class="banner-actions">
                                <a href="@Url.Action("UpdateBanner", "AdminBanner", new { area = "Admin", id = banner.BannerId })" class="btn btn-edit btn-action">Edit</a>
                                <a href="#" class="btn btn-delete btn-action" data-banner-id="@banner.BannerId" data-banner-name="@banner.Title" onclick="confirmDelete(this); return false;">Delete</a>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="alert alert-info">No banners were found.</div>
                </div>
            }
        </div>
    </div>
</div>

<!-- JS -->
<script>
    // Custom delete confirmation modal
    function confirmDelete(element) {
        const bannerId = element.getAttribute('data-banner-id');
        const bannerName = element.getAttribute('data-banner-name');

        // Modal HTML
        const modalHtml = `
            <div id="confirmationModal" class="modal-backdrop-custom">
                <div class="modal-content-custom">
                    <p class="modal-message">Are you sure you want to delete <b>"${bannerName}"</b>?</p>
                    <div class="modal-buttons">
                        <button id="modal-cancel-btn" class="btn btn-secondary">Cancel</button>
                        <button id="modal-confirm-btn" class="btn btn-danger">Delete</button>
                    </div>
                </div>
            </div>`;

        document.body.insertAdjacentHTML('beforeend', modalHtml);

        document.getElementById('modal-confirm-btn').onclick = () => {
            window.location.href = `/Admin/AdminBanner/DeleteBanner/${bannerId}`;
        };
        document.getElementById('modal-cancel-btn').onclick = () => {
            document.getElementById('confirmationModal').remove();
        };
    }

    // Search & sort
    function filterAndSortBanners() {
        const searchText = document.getElementById('bannerSearchInput').value.toLowerCase();
        const sortBy = document.getElementById('sortBanners').value;
        const bannerContainer = document.getElementById('bannerListContainer');
        const banners = Array.from(document.querySelectorAll('.banner-card'));
        let found = false;

        banners.forEach(item => {
            const title = item.getAttribute('data-title');
            const description = item.getAttribute('data-description');
            const videoDescription = item.getAttribute('data-videodescription');
            const videoUrl = item.getAttribute('data-videourl');

            if (title.includes(searchText) ||
                description.includes(searchText) ||
                videoDescription.includes(searchText) ||
                videoUrl.includes(searchText)) {
                item.style.display = '';
                found = true;
            } else {
                item.style.display = 'none';
            }
        });

        // Sort
        const visibleBanners = banners.filter(item => item.style.display !== 'none');
        visibleBanners.sort((a, b) => {
            const aValue = a.getAttribute(`data-${sortBy}`);
            const bValue = b.getAttribute(`data-${sortBy}`);
            return aValue.localeCompare(bValue);
        });

        visibleBanners.forEach(item => bannerContainer.appendChild(item));

        // No result message
        let noMessage = document.getElementById('no-banners-found-alert');
        if (!noMessage) {
            noMessage = document.createElement('div');
            noMessage.id = 'no-banners-found-alert';
            noMessage.className = 'col-12';
            noMessage.innerHTML = `<div class="alert alert-info">No banners found.</div>`;
            bannerContainer.appendChild(noMessage);
        }
        noMessage.style.display = found ? 'none' : 'block';
    }

    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('bannerSearchInput').addEventListener('input', filterAndSortBanners);
        document.getElementById('bannerSearchButton').addEventListener('click', filterAndSortBanners);
        document.getElementById('sortBanners').addEventListener('change', filterAndSortBanners);
        filterAndSortBanners();
    });
</script>
